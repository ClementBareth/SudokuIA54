/** 
 * 
 */
package fr.utbm.sudoku

import fr.utbm.sudoku.controllers.GridController
import fr.utbm.sudoku.controllers.GuiController
import fr.utbm.sudoku.controllers.InputGridController
import fr.utbm.sudoku.dao.NitriteManager
import fr.utbm.sudoku.events.Exit
import fr.utbm.sudoku.model.Difficulty
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import java.io.File
import java.util.UUID
import javafx.application.Application
import javafx.fxml.FXMLLoader
import javafx.scene.Scene
import javafx.scene.control.Alert
import javafx.scene.control.Alert.AlertType
import javafx.scene.control.ButtonBar.ButtonData
import javafx.scene.control.ButtonType
import javafx.stage.Stage

/** 
 * @author Clément Bareth
 * 
 */
class SudokuApplication extends Application implements EventListener {

	var primaryStage : Stage
		
	var gridScene : Scene
	
	var static daoRef : NitriteManager
	
	var dao : NitriteManager
	
	var ^space : OpenEventSpace
	
	var static refSpace : OpenEventSpace

	val id = UUID::randomUUID
	
	@Override
	def start(primaryStage : Stage) throws Exception {
		try {
			setUISpace(refSpace)
			dao = daoRef
			var fxmlLoader = new FXMLLoader(new File("src/main/resources/layout.fxml").toURI().toURL());
			fxmlLoader.controller = new GuiController(this)
			this.primaryStage = primaryStage
			var root = fxmlLoader.load()
			var scene = new Scene(root);
			primaryStage.resizable = false
			primaryStage.setScene(scene);
			primaryStage.show();
		} catch (e : Exception) {
			e.printStackTrace();
		}
	}
	
	@Override
	def stop() {
		emitToAgents(new Exit)
	}
	
	def openGrid() {
		var fxmlLoader2 = new FXMLLoader(new File("src/main/resources/grid.fxml").toURI().toURL());
		fxmlLoader2.controller = new GridController(this)
		var root = fxmlLoader2.load()
		this.gridScene = new Scene(root)	
		var stage = new Stage()
		stage.setScene(gridScene)
		primaryStage.setScene(gridScene)		
	}

	def openInputGrid() : InputGridController {
		var fxmlLoader2 = new FXMLLoader(new File("src/main/resources/inputgrid.fxml").toURI().toURL());
		fxmlLoader2.controller = new InputGridController(this)
		var root = fxmlLoader2.load()
		this.gridScene = new Scene(root)
		var stage = new Stage()
		stage.setScene(gridScene)
		primaryStage.setScene(gridScene)
		return fxmlLoader2.controller
	}
	
	def askDifficulty : Difficulty {
		var alert = new Alert(AlertType.CONFIRMATION);
		alert.headerText = "Choisissez la difficulté"
		alert.setTitle("Choisir la difficulté");
		alert.setContentText("");

		var buttonTypeOne = new ButtonType("Facile");
		var buttonTypeTwo = new ButtonType("Moyen");
		var buttonTypeThree = new ButtonType("Difficile");
		var buttonTypeFour = new ButtonType("Diabolique");
		
		var buttonTypeCancel = new ButtonType("Annuler", ButtonData.CANCEL_CLOSE);

		alert.getButtonTypes().setAll(buttonTypeOne, buttonTypeTwo, buttonTypeThree, buttonTypeFour,buttonTypeCancel);

		var result = alert.showAndWait();
		if (result.get() == buttonTypeOne) {
			return Difficulty.FACILE
		} else if (result.get() == buttonTypeTwo) {
			return Difficulty.MOYEN
		} else if (result.get() == buttonTypeThree) {
			return Difficulty.DIFFICILE
		} else if (result.get() == buttonTypeFour) {
			return Difficulty.DIABOLIQUE
		} else {
			return null;
		}
	}

	def emitToAgents(^event : Event) : void {
		if (this.^space !== null) {
			this.^space.emit(id, ^event)
		}
	}

	def setUISpace(^space : OpenEventSpace) {
		this.^space?.unregister(this)
		this.^space = ^space
		this.^space?.register(this)
	}
	
	def launchGui(){
		launch();
	}
	
	def receiveEvent(^event : Event) {
	}
	
	def getID : UUID {
		this.id
	}
	
	def static defRefSpace(ref : OpenEventSpace){
		refSpace = ref
	}
	
	def static defRefDao(daoRefS : NitriteManager) {
		daoRef = daoRefS
	}
	
	def getDao() : NitriteManager{
		return dao;
	}
	
}
