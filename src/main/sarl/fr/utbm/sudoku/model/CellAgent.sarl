/** 
 * 
 */
package fr.utbm.sudoku.model

import fr.utbm.sudoku.events.PositionX
import fr.utbm.sudoku.events.PositionY
import fr.utbm.sudoku.events.Resolve
import fr.utbm.sudoku.events.SolutionFound
import io.sarl.core.Behaviors
import io.sarl.core.ContextJoined
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.util.Scopes
import java.util.HashSet

/** 
 * @author Clément Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
agent CellAgent {
	uses Logging, ExternalContextAccess, DefaultContextInteractions, SudokuMaths, Behaviors

	var x : Integer
	var y : Integer

	var rowCtxId : ContextContainer

	var colCtxId : ContextContainer
	
	var rowJoined : boolean 
	var colJoined : boolean
	
	var nbValuesReceived = new Integer(0)
	
	var values = new HashSet<Integer>
	
	@SuppressWarnings("deprecated_member_reference")
	on Initialize {
		if (occurrence.parameters.length >= 4) {
			rowCtxId = occurrence.parameters.get(0) as ContextContainer
			colCtxId = occurrence.parameters.get(1) as ContextContainer
			x = occurrence.parameters.get(2) as Integer // row
			y = occurrence.parameters.get(3) as Integer // col
			loggingName = "Cell n° (" + x + "," + y + ")"
			join(rowCtxId.contextId, rowCtxId.^space.spaceID.ID)
			join(colCtxId.contextId, colCtxId.^space.spaceID.ID)
		}
		setSkill(new SudokuMathsBaseSkill(values), SudokuMaths)
	}

	on ContextJoined {
		if (occurrence.holonContextID.equals(rowCtxId.contextId)) {
			rowJoined = true
			rowCtxId.^space.emit(
				new PositionX(y, getID),
				Scopes.addresses(rowCtxId.^space.getAddress(rowCtxId.id))
			)
		}
		if (occurrence.holonContextID.equals(colCtxId.contextId)) {
			colJoined = true
			colCtxId.^space.emit(
				new PositionY(x, getID),
				Scopes.addresses(colCtxId.^space.getAddress(colCtxId.id))				
			)
		}
	}

	on Resolve [nbValuesReceived < 3] {
		synchronized(values){
			values.addAll(occurrence.values)
			nbValuesReceived++
		}
	}
	
	on Resolve [nbValuesReceived == 3]{
		if (evaluateCandidates.size == 0) {
			info("Solution found : " + evaluateCandidates.get(0))
			emit(
				new SolutionFound => [ solution = evaluateCandidates.get(0)]			
				)
			rowCtxId.^space.emit(
				new SolutionFound => [solution = evaluateCandidates.get(0)]
			)
			colCtxId.^space.emit(new SolutionFound => [solution = evaluateCandidates.get(0)]
				
			)
		}
	}

	on SolutionFound [!it.isFrom(ID)] {
		values.add(occurrence.solution)
		wake(new Resolve)
	}
}
