/** 
 * 
 */
package fr.utbm.sudoku.model

import fr.utbm.sudoku.events.Resolve
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.HashMap
import java.util.List
import java.util.UUID

/** 
 * @author Clément Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
agent BlocAgent extends RegionAgent {
	uses Logging, InnerContextAccess, Lifecycle, Behaviors
	
	var startRow : Integer
	var startCol : Integer
	var blocValues : List<Integer>
	var rowCtxIds : List<UUID>
	var colCtxIds : List<UUID>
	val agents = new HashMap<Integer, UUID>

	on Initialize {
		if (occurrence.parameters.length >= 5) {
			this.startRow = occurrence.parameters.get(0) as Integer
			this.startCol = occurrence.parameters.get(1) as Integer
			this.blocValues = occurrence.parameters.get(2) as List<Integer>
			this.rowCtxIds = occurrence.parameters.get(3) as List<UUID>
			this.colCtxIds = occurrence.parameters.get(4) as List<UUID>
			loggingName = "Bloc n°(" + startRow + ","+startCol+")"
		}
		for (var i = 0; i < 9; i++) {
			if (blocValues.get(i) == 0) {
				var row = startRow + i / 3 as Integer
				var col = startCol + i % 3
				agents.put(i, CellAgent.spawnInContext(innerContext, rowCtxIds.get(row), colCtxIds.get(col),row,col))
			}
		}
	}

	on Resolve [!it.isFrom(ID)] {
		wake(new Resolve => [values = blocValues])
	}
}
