/** 
 * 
 */
package fr.utbm.sudoku.model

import fr.utbm.sudoku.behaviors.RegionAgentBehavior
import fr.utbm.sudoku.capacities.SudokuMaths
import fr.utbm.sudoku.capacities.SudokuMathsBaseSkill
import fr.utbm.sudoku.events.ColAgentSpawned
import fr.utbm.sudoku.events.ColInitialized
import fr.utbm.sudoku.events.PositionY
import fr.utbm.sudoku.events.Resolve
import fr.utbm.sudoku.events.Values
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Logging
import java.util.HashMap
import java.util.List
import java.util.UUID

/** 
 * @author Clément Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
agent ColumnAgent {
	uses Logging, InnerContextAccess, DefaultContextInteractions, Behaviors, SudokuMaths

	var colNum : Integer
	var colValues : List<Integer>
	var agents = new  HashMap<Integer,UUID>

	on Initialize {
		
		registerBehavior(new RegionAgentBehavior(this))
		if (occurrence.parameters.length >= 2) {
			this.colNum = occurrence.parameters.get(0) as Integer
			this.colValues = occurrence.parameters.get(1) as List<Integer>
			loggingName = "ColumnAgent n° " + colNum
		}
		setSkill(new SudokuMathsBaseSkill(colValues.toSet), SudokuMaths)
		emit(new ColAgentSpawned => [
			num = colNum;
			contextId = innerContext.ID;
			^space = innerContext.defaultSpace;
			Id = ID;
			
		])
	}

	def countZeros : Integer {
		var j = 0;
		for (i : colValues) {
			if (i===null || i == 0) {
				j++
			}
		}
		return j;
	}

	on PositionY {
		synchronized (agents) {
			agents.put(occurrence.pos, occurrence.id)
			if (agents.size == countZeros) {
				emit(new ColInitialized => [id = ID])
			}
		}
	}

	on Resolve [!it.isFrom(ID)] {
		wake(new Values => [values = colValues])
		if (evaluateCandidates.size == 0){
			
		}
	}
}
