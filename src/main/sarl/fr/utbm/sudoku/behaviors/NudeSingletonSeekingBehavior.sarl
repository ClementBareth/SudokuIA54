/** 
 * 
 */
package fr.utbm.sudoku.behaviors

import fr.utbm.sudoku.capacities.SudokuBaseCommunication
import fr.utbm.sudoku.capacities.SudokuCommunication
import fr.utbm.sudoku.events.Resolve
import fr.utbm.sudoku.events.SeekNudeSingletons
import fr.utbm.sudoku.events.SolutionFound
import io.sarl.core.Initialize
import io.sarl.lang.core.Agent
import java.util.concurrent.ConcurrentLinkedQueue

/** 
 * @author Cl√©ment Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
behavior NudeSingletonSeekingBehavior {
	uses SudokuCommunication
	
	var resolving = true
	var candidates : ConcurrentLinkedQueue<Integer>
	var communicationSkill : SudokuBaseCommunication
	
	new (a : Agent, c : ConcurrentLinkedQueue<Integer>, s : SudokuBaseCommunication) {
		super(a)
		this.candidates = c
		this.communicationSkill = s
	}

	on Resolve [resolving]{
		seekSolution
	}

	on SolutionFound [resolving] {
		seekSolution
	}
	
	on SeekNudeSingletons [resolving]{
		seekSolution
	}

	on Initialize {
		setSkill(communicationSkill, SudokuCommunication)
	}
	
	def seekSolution() {
		if (resolving && candidates.size == 1) {
			resolving = false
			emitToAllHolons(new SolutionFound => [solution = candidates.element; x = getX; y = getY])
		}
	}
	

}
