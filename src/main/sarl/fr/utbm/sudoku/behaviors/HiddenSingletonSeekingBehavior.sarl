/** 
 * 
 */
package fr.utbm.sudoku.behaviors

import fr.utbm.sudoku.capacities.SudokuBaseCommunication
import fr.utbm.sudoku.capacities.SudokuCommunication
import fr.utbm.sudoku.events.AnswerForCandidate
import fr.utbm.sudoku.events.AskForCandidate
import fr.utbm.sudoku.events.SolutionFound
import fr.utbm.sudoku.events.StartResolve
import fr.utbm.sudoku.events.StopResolve
import fr.utbm.sudoku.events.TokenReceived
import fr.utbm.sudoku.events.TokenReleased
import fr.utbm.sudoku.model.RegionTypeEnum
import fr.utbm.sudoku.model.ScanCommand
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.lang.core.Agent
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.concurrent.ConcurrentLinkedQueue
import java.util.concurrent.locks.ReentrantLock

/** 
 * @author Clément Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
behavior HiddenSingletonSeekingBehavior {

	uses DefaultContextInteractions, SudokuCommunication, ExternalContextAccess, Behaviors

	var resolving = true
	var scanning = false
	var candidates : ConcurrentLinkedQueue<Integer>
	var sudokuCommunicationSkill : SudokuBaseCommunication
	var scanQueue = new ConcurrentLinkedQueue<ScanCommand>
	var scanCommand : ScanCommand
	var scanCommandLock = new ReentrantLock
	

	new (a : Agent, c : ConcurrentLinkedQueue<Integer>, s : SudokuBaseCommunication) {
		super(a)
		this.candidates = c
		this.sudokuCommunicationSkill = s
	}

	on Initialize {
		setSkill(sudokuCommunicationSkill, SudokuCommunication)
	}

	on TokenReceived [resolving && scanQueue.size > 0] {
		scanning = true
		scanNextRegion
	}

	on TokenReceived [!resolving || scanQueue.size == 0] {
		emit(new TokenReleased)
	}

	on StartResolve [isFromMe] {
		for (c : candidates) {
			for (type : RegionTypeEnum.values) {
				var scanCommand = new ScanCommand => [
					it.candidate = c;
					it.expectedAnswers = spaces.get(type).participants.size - 2
					it.type = type
				]
				scanQueue.add(scanCommand)
			}
		}
	}

	on SolutionFound [!isFromMe] {
		var regions = determineRegion(occurrence.x, occurrence.y)
		for (r : regions) {
			for (c : candidates) {
				if (c !== occurrence.solution) { // On vérifie quand même au cas où
					var scanCommand = new ScanCommand => [
						it.candidate = c;
						it.type = r;
						it.expectedAnswers = spaces.get(r).participants.size - 2
					]
					// On vérifie qu'une commande similaire n'est pas en attente
					if (!scanQueue.contains(scanCommand)) {
						scanQueue.add(scanCommand)
					}
				}
			}
		}
		// On supprime les commandes de scan qui étaient liées à ce candidat dans les régions concernées
		var elemsToRemove = new ArrayList<ScanCommand>
		for (sc : scanQueue) {
			if (sc.candidate == occurrence.solution && regions.contains(sc.type)) {
				elemsToRemove.add(sc)
			}
		}
		scanQueue.removeAll(elemsToRemove)
		// Si la commande de scan actuel concerne la solution trouvée, on passe à la commande suivante
		if (scanCommand !== null && scanCommand.candidate == occurrence.solution) {
			scanNextRegion
		}
	}
	/** 
	 * L'agent reçoit une réponse à son AskForCandidate
	 * Si aucun agent d'un des holons partagés ne peut recevoir le candidat, alors on a une solution
	 */
	on AnswerForCandidate [scanCommand !== null && scanCommand.candidate == occurrence.value && resolving &&
		!isFromMe && !scanCommand.hasAgentAnswered(occurrence.source.UUID)] {

		scanCommandLock.lock
		var result = scanCommand.addAnswer(occurrence.source.UUID, occurrence.answer)
		var candidate = scanCommand.candidate
		scanCommandLock.unlock

		if (result !== null) {
			if (result == -1) {
				// Scan terminé sans solution
				scanNextRegion
			} else if (result > 0) {
				// Scan terminé avec solution
				scanning = false
				resolving = false
				wake(new StopResolve)
				candidates.clear
				emitToAllHolons(new SolutionFound => [solution = candidate; x = getX; y = getY])
				relaseToken
			}
		}

	}
	/** 
	 * L'agent reçoit une demande d'un autre agent pour s'avoir s'il peut acceuilir le candidat passé en paramètre
	 */
	on AskForCandidate [!isFrom(spaces.get(RegionTypeEnum.BLOC).getAddress(ID)) &&
		!isFrom(spaces.get(RegionTypeEnum.LIGNE).getAddress(ID)) &&
		!isFrom(spaces.get(RegionTypeEnum.COLONNE).getAddress(ID))] {

		val answerEvent = new AnswerForCandidate => [
			answer = candidates.contains(occurrence.value);
			value = new Integer(occurrence.value);
			x = getX;
			y = getY;
			type = occurrence.type;
		]

		answerEvent.source = spaces.get(occurrence.type).getAddress(ID)
		spaces.get(occurrence.type).emit(answerEvent, Scopes::addresses(occurrence.source))
	}

	def relaseToken {
		emit(new TokenReleased)
	}

	def scanNextRegion() {
		scanCommandLock.lock
		scanCommand = scanQueue.poll
		scanCommandLock.unlock
		if (scanCommand !== null) {
			var e = new AskForCandidate(scanCommand.candidate, scanCommand.type)
			e.emitToHolon(scanCommand.type)
		} else {
			relaseToken
		}
	}
}
