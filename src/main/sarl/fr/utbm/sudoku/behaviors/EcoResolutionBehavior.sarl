/** 
 * 
 */
package fr.utbm.sudoku.behaviors

import fr.utbm.sudoku.capacities.SudokuBaseCommunication
import fr.utbm.sudoku.capacities.SudokuCommunication
import fr.utbm.sudoku.events.Aggression
import fr.utbm.sudoku.events.EcoValue
import fr.utbm.sudoku.events.StartResolve
import fr.utbm.sudoku.events.TokenReceived
import fr.utbm.sudoku.events.TokenReleased
import fr.utbm.sudoku.model.RegionTypeEnum
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.Collections
import java.util.HashMap
import java.util.List
import java.util.Map
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentLinkedQueue

/** 
 * @author Clément Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
behavior EcoResolutionBehavior {

	uses SudokuCommunication, Logging

	var private sudokuCommunicationSkill : SudokuBaseCommunication
	var private candidates : ConcurrentLinkedQueue<Integer>
	var private actualValue = new Integer(0)
	var agentsValues = new ConcurrentHashMap<UUID, Integer>

	on Initialize {
		setSkill(sudokuCommunicationSkill, SudokuCommunication)
	}

	new(^agent : Agent, values : ConcurrentLinkedQueue<Integer>, s : SudokuBaseCommunication) {
		super(^agent)
		this.candidates = values
		this.sudokuCommunicationSkill = s
	}

	on EcoValue {
		agentsValues.replace(occurrence.source.UUID, occurrence.value)
	}

	on StartResolve [occurrence.source.UUID == ID] {
		if (occurrence.agents !== null) {
			for (a : occurrence.agents) {
				agentsValues.put(a, 0)
			}
		}else{
			error("Pas d'agents")
		}
	}

	on Aggression [!isMe(occurrence.source.UUID) && candidates.size > 1] {
		// Fuite
		agentsValues.replace(occurrence.source.UUID, occurrence.value)
		val cand = valuesWithLessOccurrences
		cand.removeAll(#[actualValue, occurrence.value])
		if (cand.size > 0) {
			changeValue(pollRandomValueFromList(cand))
		} else {
			error("No candidates availables")
		}
	}
	
	on TokenReleased [occurrence.done == true] {
		agentsValues.remove(occurrence.source.UUID)
	}

	// Si l'agent n'a qu'un seul candidat, c'est forcément la solution.
	on TokenReceived [candidates.size == 1] {
		changeValue(candidates.element)
		releaseToken(true)
	}

	// Chaque agent recevra une fois le token pour intialiser sa valeur
	on TokenReceived [!satisfied] {
		// Aggression
		changeValue(candidates.element)
		releaseToken(false)
	}

	on TokenReceived [satisfied] {
		releaseToken(false)
	}

	def private satisfied : boolean {
		return (!actualValue.equals(0))
	}

	def private getValuesWithLessOccurrences : List<Integer> {
		var occurrences = occurrencesMap
		var min = Collections.min(occurrences.values)
		var list = new ArrayList<Integer>
		for (e : occurrences.entrySet) {
			if (e.value.equals(min)) {
				list.add(e.key)
			}
		}
		return list;
	}
	
	def changeValue(value : int) {
		info("Mongolise")
		actualValue = value
		emitToAllHolons(new EcoValue => [x = getX; y = getY; value = actualValue])
		if(agentsValues.values.contains(actualValue)) agression
	}

	def agression() {
		var listBloc = new ArrayList<Address>
		var listCol = new ArrayList<Address>
		var listRow = new ArrayList<Address>

		for (entry : agentsValues.entrySet) {
			if (entry.value.equals(actualValue)) {
				var type = getHolon(entry.key)
				switch (type) {
					case BLOC:
						listBloc.add(
							spaces.get(RegionTypeEnum.BLOC).getAddress(entry.key)
						)
					case COLONNE:
						listCol.add(
							spaces.get(RegionTypeEnum.COLONNE).getAddress(entry.key)
						)
					case LIGNE:
						listRow.add(
							spaces.get(RegionTypeEnum.LIGNE).getAddress(entry.key)
						)
				}
			}
		}
		var agressionEvent = new Aggression => [it.value = actualValue; x = getX; y = getY]
		if(listBloc.size > 1) agressionEvent.emitToHolon(RegionTypeEnum.BLOC, Scopes.addresses(listBloc))
		if(listBloc.size > 1) agressionEvent.emitToHolon(RegionTypeEnum.LIGNE, Scopes.addresses(listRow))
		if(listBloc.size > 1) agressionEvent.emitToHolon(RegionTypeEnum.COLONNE, Scopes.addresses(listCol))
	}

	def private countOccurrences(candidate : Integer) : Integer {
		return Collections.frequency(agentsValues.values, candidate)
	}

	def private getOccurrencesMap : Map<Integer, Integer> {
		var map = new HashMap<Integer, Integer>
		for (c : candidates) {
			map.put(c, c.countOccurrences)
		}
		return map
	}

	def private pollRandomValueFromList(list : List<Integer>) {
		Collections.shuffle(list)
		var value = list.get(0)
		list.remove(value)
		return value
	}
}
