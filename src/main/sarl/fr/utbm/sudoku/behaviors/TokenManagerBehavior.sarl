/** 
 * 
 */
package fr.utbm.sudoku.behaviors

import fr.utbm.sudoku.events.TokenRequirement
import fr.utbm.sudoku.events.TokenRequirementAnswer
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Logging
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.util.Scopes
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.Semaphore

/** 
 * @author Cl√©ment Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
behavior TokenManagerBehavior {

	uses DefaultContextInteractions, Logging

	var rowAgents : ConcurrentHashMap<Integer, UUID>
	var colAgents : ConcurrentHashMap<Integer, UUID>

	var blocAsking : Address

	var rowAsked : UUID
	var colAsked : UUID

	var rowAnswered : boolean
	var colAnswered : boolean

	var xToken : int
	var yToken : int
	var idAgent : UUID

	var nbAlgos : int

	var semaphore = new Semaphore(1)

	new (a : Agent, rows : ConcurrentHashMap<Integer, UUID>, cols : ConcurrentHashMap<Integer, UUID>, nbAlgos : int) {
		super(a)
		this.rowAgents = rows
		this.colAgents = cols
		this.nbAlgos = nbAlgos
	}

	on TokenRequirement {
		semaphore.acquire
		rowAnswered = false
		colAnswered = false
		blocAsking = occurrence.source
		xToken = occurrence.x
		yToken = occurrence.y
		idAgent = occurrence.id
		rowAsked = rowAgents.get(xToken)
		colAsked = colAgents.get(yToken)
		emit(new TokenRequirement => [x = xToken; y = yToken], Scopes.addresses(
			defaultSpace.getAddress(rowAsked),
			defaultSpace.getAddress(colAsked)
		))
	}

	on TokenRequirementAnswer {
		if (occurrence.isFrom(rowAsked)) {
			rowAnswered = true
			if(occurrence.nbTokens < nbAlgos) xToken = -1
		} else if (occurrence.isFrom(colAsked)) {
			colAnswered = true
			if(occurrence.nbTokens < nbAlgos) yToken = -1
		}
		if (rowAnswered && colAnswered) {			
			emit(new TokenRequirement => [x = this.xToken; y = this.yToken; id = this.idAgent],
				Scopes.addresses(blocAsking))
			semaphore.release
		}
	}
}
