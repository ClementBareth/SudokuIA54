/** 
 * 
 */
package fr.utbm.sudoku.behaviors

import fr.utbm.sudoku.events.ReadyToResolve
import fr.utbm.sudoku.events.TokenReceived
import fr.utbm.sudoku.events.TokenReleased
import io.sarl.core.Behaviors
import io.sarl.core.InnerContextAccess
import io.sarl.core.Logging
import io.sarl.util.Scopes
import java.util.Collections
import java.util.HashMap
import java.util.UUID

/** 
 * @author Clément Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
behavior RegionAgentBehavior {
	
	uses Behaviors, InnerContextAccess, Logging

	var tokens = new HashMap<UUID, Integer>
	
	var agentResolving : UUID = null

	/**
	 * Détermine l'agent qui a eu le token le moins de fois jusqu'ici
	 */
	def determineAgentToReceiveToken : UUID {
		var min = Collections.min(tokens.values)
		for (entry : tokens.entrySet) {
			if (entry.value == min) {
				return entry.key
			}
		}
	}

	/**
	 * Envois du token à l'agent concerné
	 */
	def sendToken(id : UUID) {
		agentResolving = id;
		wake(
			new TokenReceived,
			Scopes.addresses(innerContext.defaultSpace.getAddress(id))
		)
	} 

	/**
	 * Le token a été relâché par l'agent qui l'avait
	 */ 
	on TokenReleased{
		var nb = tokens.get(occurrence.source.UUID)
		nb ++
		tokens.put(occurrence.source.UUID, nb)
		sendToken(determineAgentToReceiveToken)
	}
	
	/**
	 * L'agent est initialisé
	 */
	on ReadyToResolve{
		tokens.put(occurrence.source.UUID, 0);
		if (tokens.size == innerContext.defaultSpace.participants.size-1) {
			tokens.put(occurrence.source.UUID, 1);
			sendToken(occurrence.source.UUID)
		}
	}
}
