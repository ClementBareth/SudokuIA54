/** 
 * 
 */
package fr.utbm.sudoku.controllers

import fr.utbm.sudoku.SudokuApplication
import fr.utbm.sudoku.events.Resolve
import fr.utbm.sudoku.events.SpawnRequired
import fr.utbm.sudoku.model.Sudoku
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import java.net.URL
import java.util.ResourceBundle
import java.util.UUID
import javafx.fxml.FXML
import javafx.fxml.Initializable
import javafx.geometry.HPos
import javafx.geometry.Pos
import javafx.geometry.VPos
import javafx.scene.control.Button
import javafx.scene.control.Label
import javafx.scene.layout.GridPane
import javafx.scene.text.Text

/** 
 * @author Clément Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
class GridController implements Initializable, EventListener {

	var app : SudokuApplication
	
	var id = UUID::randomUUID

	var ^space : OpenEventSpace

	@FXML
	var grid : GridPane
	
	@FXML
	var start : Button
	
	@FXML
	var sudokuName : Text

	var sudoku : Sudoku

	new (app : SudokuApplication, sudoku : Sudoku, ^space : OpenEventSpace) {
		this.app = app
		this.sudoku = sudoku
		setUISpace(^space)
		emitToAgents(new SpawnRequired => [it.controller = this])
	}

	def initialize(location : URL, resources : ResourceBundle) {
		sudokuName.text = sudoku.name
		for (var i = 0; i < 9; i++) {
			for (var j = 0; j < 9; j++) {
				if(sudoku.getValue(i,j) !== 0){
					var label = new Label("" + sudoku.getValue(i, j))
					label.alignment = Pos.CENTER
					GridPane.setConstraints(label, i, j)
					GridPane.setHalignment(label, HPos.CENTER)
					GridPane.setValignment(label, VPos.CENTER)
					grid.children.add(label)
				}
			}
		}
	}
	
	// Listeners
	
	@FXML
	def openHome {
		app.openHomeStage
	}
	
	@FXML
	def start {
		emitToAgents(new Resolve)
//		start.disable = true
	}
	
	// Méthodes graphiques
	
	def enableStart{
		start.disable = false
	}
	
	// Méthodes de communication
	
	def receiveEvent(^event : Event) {
		
	}
	
	def getID : UUID {
		return this.id
	}

	def setUISpace(^space : OpenEventSpace) {
		this.^space?.unregister(this)
		this.^space = ^space
		this.^space?.register(this)
	}

	def emitToAgents(^event : Event) : void {
		if (this.^space !== null) {
			this.^space.emit(id, ^event)
		}
	}
	
	def getSudoku{
		return this.sudoku
	}
	
}
