/** 
 * 
 */
package fr.utbm.sudoku.controllers

import fr.utbm.sudoku.SudokuApplication
import fr.utbm.sudoku.events.Resolve
import fr.utbm.sudoku.events.SpawnRequired
import fr.utbm.sudoku.events.UpdateSudoku
import fr.utbm.sudoku.model.Algorithms
import fr.utbm.sudoku.model.Sudoku
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import java.net.URL
import java.util.ArrayList
import java.util.ResourceBundle
import java.util.UUID
import javafx.application.Platform
import javafx.fxml.FXML
import javafx.fxml.Initializable
import javafx.geometry.HPos
import javafx.geometry.Pos
import javafx.geometry.VPos
import javafx.scene.control.Button
import javafx.scene.control.CheckBox
import javafx.scene.control.Label
import javafx.scene.control.TitledPane
import javafx.scene.layout.GridPane
import javafx.scene.layout.VBox
import javafx.scene.paint.Color
import javafx.scene.text.Text

/** 
 * @author Clément Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
class GridController implements Initializable, EventListener {

	var app : SudokuApplication

	var id = UUID::randomUUID

	var ^space : OpenEventSpace

	@FXML
	var grid : GridPane

	@FXML
	var start : Button

	@FXML
	var algorithms : VBox

	@FXML
	var sudokuName : Text
	
	@FXML
	var checkboxes : TitledPane

	var sudoku : Sudoku

	new (app : SudokuApplication, sudoku : Sudoku, ^space : OpenEventSpace) {
		this.app = app
		this.sudoku = sudoku
		setUISpace(^space)
		emitToAgents(new SpawnRequired => [controller = this])
	}

	def initialize(location : URL, resources : ResourceBundle) {
		sudokuName.text = sudoku.name
		for (var i = 0; i < 9; i++) {
			for (var j = 0; j < 9; j++) {
				var label : Label
				if (sudoku.getValue(i, j) !== null && sudoku.getValue(i, j) !== 0) {
					label = new Label("" + sudoku.getValue(i, j))
					label.textFill = Color.GREEN
				} else {
					label = new Label
				}
				label.alignment = Pos.CENTER
				GridPane.setConstraints(label, i, j)
				GridPane.setHalignment(label, HPos.CENTER)
				GridPane.setValignment(label, VPos.CENTER)
				grid.children.add(label)
			}
		}
	}

	// Listeners
	@FXML
	def openHome {
		app.openHomeStage
	}
	
	@FXML
	def checkIfOneAlgoSelected {
		var atLeastOne = false;
		for (child : algorithms.children) {
			if (child instanceof CheckBox) {
				if (child.selected) {
					atLeastOne = true
				}
			}
		}
		if(!atLeastOne){
			start.disable = true
		}else{
			start.disable = false
		}
	}

	@FXML
	def start {
		var algoList = new ArrayList<Algorithms>
		for (child : algorithms.children) {
			if (child instanceof CheckBox) {
				if (child.selected) {
					switch (child.id) {
						case "nude_singleton": algoList.add(Algorithms.NUDE_SINGLETONS)
						case "hidden_singleton": algoList.add(Algorithms.HIDDEN_SINGLETONS)
						case "eco_resolution": algoList.add(Algorithms.ECO_RESOLUTION)
					}
				}
			}
		}
		emitToAgents(new Resolve => [algos = algoList])
		start.disable = true
	}

	// Méthodes graphiques
	def updateSudoku(x : Integer, y : Integer, value : Integer, definitive : boolean) {
		Platform.runLater([
			try {
				sudoku.setValue(x, y, value)
				setLabel(x, y, value)
				if(definitive){
					getLabelAt(x, y).textFill = Color.GREEN
				}
			} catch (e : Exception) {
				e.printStackTrace
			}
		])
	}

	def setLabel(x : Integer, y : Integer, value : Integer) {
		var label = getLabelAt(x, y)
		if (value === null) label.text = ""
		else label.text = "" + value
	}

	def getLabelAt(x : Integer, y : Integer) : Label {
		for (var i = 0; i < 9; i++) {
			for (var j = 0; j < 9; j++) {
				var children = grid.getChildren()
				for (child : children) {
					if (child instanceof Label) {
						if (GridPane.getRowIndex(child) == x && GridPane.getColumnIndex(child) == y) {
							return child
						}
					}
				}
			}
		}
	}

	def enableStart {
		start.disable = false
		checkboxes.disable = false
	}

	// Méthodes de communication
	def receiveEvent(^event : Event) {
		if (^event instanceof UpdateSudoku) {
			updateSudoku(^event.x, ^event.y, ^event.solution, ^event.definitive)
		}
	}

	def getID : UUID {
		return this.id
	}

	def setUISpace(^space : OpenEventSpace) {
		this.^space?.unregister(this)
		this.^space = ^space
		this.^space?.register(this)
	}

	def emitToAgents(^event : Event) : void {
		if (this.^space !== null) {
			this.^space.emit(id, ^event)
		}
	}

	def getSudoku {
		return this.sudoku
	}

}
