/** 
 * 
 */
package fr.utbm.sudoku.controllers

import fr.utbm.sudoku.SudokuApplication
import fr.utbm.sudoku.events.Resolve
import fr.utbm.sudoku.events.SpawnRequired
import fr.utbm.sudoku.events.Stop
import fr.utbm.sudoku.events.SudokuResolved
import fr.utbm.sudoku.events.UpdateSudoku
import fr.utbm.sudoku.model.Algorithms
import fr.utbm.sudoku.model.Sudoku
import fr.utbm.sudoku.view.SudokuView
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import java.net.URL
import java.util.ArrayList
import java.util.Date
import java.util.ResourceBundle
import java.util.UUID
import javafx.fxml.FXML
import javafx.fxml.Initializable
import javafx.scene.control.Button
import javafx.scene.control.CheckBox
import javafx.scene.control.TitledPane
import javafx.scene.layout.GridPane
import javafx.scene.layout.VBox
import javafx.scene.text.Text

/** 
 * @author Clément Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
class GridController implements Initializable, EventListener, Controller {

	var app : SudokuApplication

	var id = UUID::randomUUID

	var ^space : OpenEventSpace

	@FXML
	var grid : GridPane

	@FXML
	var start : Button

	@FXML
	var algorithms : VBox

	@FXML
	var sudokuName : Text
	
	@FXML
	var checkboxes : TitledPane
	
	var sudokuView : SudokuView

	var sudoku : Sudoku
	
	@FXML
	var terminer : Button
	
	var time = new Date().time

	new (app : SudokuApplication, sudoku : Sudoku, ^space : OpenEventSpace) {
		this.app = app
		this.sudoku = sudoku
		setUISpace(^space)
		emitToAgents(new SpawnRequired => [controller = this])
	}

	def initialize(location : URL, resources : ResourceBundle) {
		sudokuView = new SudokuView(grid,sudoku)
		terminer.disable = true
		sudokuName.text = sudoku.name
	}

	// Listeners
	@FXML
	def openHome {
		app.openHomeStage
		emitToAgents(new Stop)
	}
	
	@FXML
	def checkIfOneAlgoSelected {
		var atLeastOne = false;
		for (child : algorithms.children) {
			if (child instanceof CheckBox) {
				if (child.selected) {
					atLeastOne = true
				}
			}
		}
		if(!atLeastOne){
			start.disable = true
		}else{
			start.disable = false
		}
	}

	@FXML
	def start {
		var algoList = new ArrayList<Algorithms>
		for (child : algorithms.children) {
			if (child instanceof CheckBox) {
				if (child.selected) {
					switch (child.id) {
						case "nude_singleton": algoList.add(Algorithms.NUDE_SINGLETONS)
						case "hidden_singleton": algoList.add(Algorithms.HIDDEN_SINGLETONS)
						case "eco_resolution": algoList.add(Algorithms.ECO_RESOLUTION)
					}
				}
			}
		}
		emitToAgents(new Resolve => [algos = algoList])
		start.disable = true
	}

	def enableStart {
		start.disable = false
		checkboxes.disable = false
	}

	// Méthodes de communication
	def receiveEvent(^event : Event) {
		if (^event instanceof UpdateSudoku) {
			sudokuView.updateSudoku(^event.x, ^event.y, ^event.solution, ^event.definitive)
			time = new Date().time
		}
		if (^event instanceof SudokuResolved) {
			terminer.disable = false
		}

	}

	def getID : UUID {
		return this.id
	}

	def setUISpace(^space : OpenEventSpace) {
		this.^space?.unregister(this)
		this.^space = ^space
		this.^space?.register(this)
	}

	def emitToAgents(^event : Event) : void {
		if (this.^space !== null) {
			this.^space.emit(id, ^event)
		}
	}

	def getSudoku : Sudoku {
		return this.sudoku
	}

}
