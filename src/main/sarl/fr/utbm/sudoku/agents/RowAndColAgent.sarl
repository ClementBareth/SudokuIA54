/** 
 * 
 */
package fr.utbm.sudoku.agents

import fr.utbm.sudoku.events.Position
import fr.utbm.sudoku.events.RegionAgentInitialized
import fr.utbm.sudoku.events.RegionAgentSpawned
import fr.utbm.sudoku.events.Resolve
import fr.utbm.sudoku.events.Values
import fr.utbm.sudoku.model.RegionTypeEnum
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.MemberLeft
import java.util.HashSet
import java.util.List
import java.util.UUID

/** 
 * @author Clément Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
agent RowAndColAgent {
	uses Logging, InnerContextAccess, DefaultContextInteractions, Behaviors, Lifecycle

	var position : Integer
	var values : List<Integer>
	var agents = new HashSet<UUID>
	var agentType : RegionTypeEnum

	on Initialize {
		if (occurrence.parameters.length >= 3) {
			this.position = occurrence.parameters.get(0) as Integer
			this.values = occurrence.parameters.get(1) as List<Integer>
			this.agentType = occurrence.parameters.get(2) as RegionTypeEnum
			loggingName = agentType + " n° " + position
		}
		info("Spawned")
		emit(new RegionAgentSpawned => [
			it.num = position;
			contextId = innerContext.ID;
			^space = innerContext.defaultSpace;
			Id = ID;
			it.type = agentType;
		])
	}

	def countZeros : Integer {
		var j = 0;
		for (i : values) {
			if (i === null || i == 0) {
				j++
			}
		}
		return j;
	}

	on Resolve [!isFromMe] {
		wake(new Values => [values = this.values; type = this.agentType; it.agents = this.agents])
	}

	on Position {
		agents.add(occurrence.id)
		info(agents.size +"/"+countZeros + " agents.")
		if (agents.size == countZeros) {
			info("Initialisée.")
			emit(
				new RegionAgentInitialized => [
					id = ID;
					type = this.agentType;
				]
			)
		}
	}

	on MemberLeft {
		if(innerContext.defaultSpace.participants.size == 1) killMe
	}
}
