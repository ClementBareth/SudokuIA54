/** 
 * 
 */
package fr.utbm.sudoku.agents

import fr.utbm.sudoku.events.Algos
import fr.utbm.sudoku.events.EcoValue
import fr.utbm.sudoku.events.Exit
import fr.utbm.sudoku.events.ReadyToResolve
import fr.utbm.sudoku.events.Resolve
import fr.utbm.sudoku.events.SolutionFound
import fr.utbm.sudoku.events.SolutionFoundInBloc
import fr.utbm.sudoku.events.TokenReceived
import fr.utbm.sudoku.events.TokenReleased
import fr.utbm.sudoku.events.UpdateSudoku
import fr.utbm.sudoku.events.Values
import fr.utbm.sudoku.model.AgentPosition
import fr.utbm.sudoku.model.Algorithms
import fr.utbm.sudoku.model.ContextContainer
import fr.utbm.sudoku.model.RegionTypeEnum
import fr.utbm.sudoku.model.Tokens
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.MemberLeft
import io.sarl.core.Schedules
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.List
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.locks.ReentrantLock
import fr.utbm.sudoku.events.TokenRequirement

/** 
 * @author Clément Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
agent BlocAgent {
	uses Logging, InnerContextAccess, Lifecycle, Behaviors, DefaultContextInteractions, Schedules

	var startRow : Integer
	var startCol : Integer
	var blocValues : List<Integer>
	var rowCtxIds : ConcurrentHashMap<Integer, ContextContainer>
	var colCtxIds : ConcurrentHashMap<Integer, ContextContainer>
	val agents = new ArrayList<UUID>
	var valuesLock = new ReentrantLock
	var agentResolving : UUID = null
	var nbTokenReleased = 0
	var expectedTokens : Integer
	var tokens = new Tokens

	on Initialize {
		if (occurrence.parameters.length >= 5) {
			this.startRow = occurrence.parameters.get(0) as Integer
			this.startCol = occurrence.parameters.get(1) as Integer
			this.blocValues = occurrence.parameters.get(2) as List<Integer>
			this.rowCtxIds = occurrence.parameters.get(3) as ConcurrentHashMap<Integer, ContextContainer>
			this.colCtxIds = occurrence.parameters.get(4) as ConcurrentHashMap<Integer, ContextContainer>
			loggingName = "Bloc n°(" + startRow + "," + startCol + ")"
		}
		for (var i = 0; i < 9; i++) {
			if (blocValues.get(i) === null || blocValues.get(i) == 0) {
				var row = startRow + i / 3 as Integer
				var col = startCol + i % 3
				agents.add(CellAgent.spawnInContext(innerContext, rowCtxIds.get(row), colCtxIds.get(col), row, col))
			}
		}
	}

	on Resolve [!it.isFrom(ID)] {
		wake(new Values => [values = blocValues; type = RegionTypeEnum.BLOC; it.agents = this.agents.toSet])
		if (occurrence.algos.contains(Algorithms.ECO_RESOLUTION) &&
			occurrence.algos.contains(Algorithms.HIDDEN_SINGLETONS)) {
			expectedTokens = 2
		} else if (occurrence.algos.contains(Algorithms.ECO_RESOLUTION) ||
			occurrence.algos.contains(Algorithms.HIDDEN_SINGLETONS)) {
			expectedTokens = 1
		}
		wake(new Algos => [algos = occurrence.algos])
	}

	on SolutionFound {
		agents.remove(occurrence.source.UUID)
		// tokens.remove(occurrence.source.UUID)
		tokens.removeAgent(new AgentPosition(occurrence.x, occurrence.y, occurrence.source.UUID))
		valuesLock.lock
		if (!blocValues.contains(occurrence.solution)) {
			blocValues.add(occurrence.solution)
			valuesLock.unlock
			emit(new SolutionFoundInBloc => [solution = occurrence.solution; x = occurrence.x; y = occurrence.y])
		} else {
			valuesLock.unlock
		}
	}

	on EcoValue {
		emit(new SolutionFoundInBloc => [solution = occurrence.value; x = occurrence.x; y = occurrence.y])
	}

	on UpdateSudoku {
		emit(new UpdateSudoku => [solution = occurrence.solution; x = occurrence.x; y = occurrence.y])
	}

	on Exit {
		wake(new Exit)
	}

	on MemberLeft {
		if(innerContext.defaultSpace.participants.size == 1) killMe
	}

	def sendToken(id : UUID) {
		in(5000) [
			agentResolving = id;
			wake(
				new TokenReceived,
				Scopes.addresses(innerContext.defaultSpace.getAddress(id))
			)

		]
	}
	/** 
	 * Le token a été relâché par l'agent qui l'avait
	 */
	on TokenReleased [occurrence.source.UUID == agentResolving] {
		nbTokenReleased++
		if (this.nbTokenReleased == expectedTokens) {
			nbTokenReleased = 0
			tokens.incrToken(new AgentPosition(occurrence.source.UUID))
			var nextAgent = tokens.getNextAgent
			if (nextAgent !== null) {
				checkToken(nextAgent)
			} else {
				// TODO Voir quoi faire si on est à null !!!!
			}
		}
	}

	on TokenReleased [occurrence.done] {
		tokens.remove(occurrence.source.UUID)
		agents.remove(occurrence.source.UUID)
	}
	
	/** 
	 * L'agent est initialisé
	 */
	on ReadyToResolve {
		tokens.addAgent(occurrence.pos);
		if (tokens.size == innerContext.defaultSpace.participants.size - 1) {
			var nextAgent = tokens.getNextAgent(occurrence.pos.x, occurrence.pos.y)
			checkToken(nextAgent)
		}
	}
	
	on TokenRequirement{
		if(occurrence.x !== null && occurrence.y !== null){
			tokens.incrToken(new AgentPosition(occurrence.x,occurrence.y,occurrence.id))
			sendToken(occurrence.id)
		}else{
			var nextAgent = tokens.getNextAgent(occurrence.x, occurrence.y)
			checkToken(nextAgent)
		}
	}
	
	def private checkToken(a : AgentPosition){
		emit(new TokenRequirement => [x = a.x; y = a.y; id = a.id], Scopes.addresses(defaultSpace.getAddress(parentID)))
	}
}
