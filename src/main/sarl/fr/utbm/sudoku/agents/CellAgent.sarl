/** 
 * 
 */
package fr.utbm.sudoku.agents

import fr.utbm.sudoku.behaviors.EcoResolutionBehavior
import fr.utbm.sudoku.behaviors.HiddenSingletonSeekingBehavior
import fr.utbm.sudoku.behaviors.NudeSingletonSeekingBehavior
import fr.utbm.sudoku.capacities.SudokuBaseCommunication
import fr.utbm.sudoku.capacities.SudokuCommunication
import fr.utbm.sudoku.capacities.SudokuMaths
import fr.utbm.sudoku.capacities.SudokuMathsBaseSkill
import fr.utbm.sudoku.events.Algos
import fr.utbm.sudoku.events.Exit
import fr.utbm.sudoku.events.Position
import fr.utbm.sudoku.events.ReadyToResolve
import fr.utbm.sudoku.events.SolutionFound
import fr.utbm.sudoku.events.StartResolve
import fr.utbm.sudoku.events.StopResolve
import fr.utbm.sudoku.events.Values
import fr.utbm.sudoku.model.Algorithms
import fr.utbm.sudoku.model.ContextContainer
import fr.utbm.sudoku.model.RegionTypeEnum
import io.sarl.core.Behaviors
import io.sarl.core.ContextJoined
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.lang.core.EventSpace
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.HashMap
import java.util.HashSet
import java.util.UUID
import java.util.concurrent.ConcurrentLinkedQueue
import java.util.concurrent.locks.ReentrantLock

/** 
 * @author Clément Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
agent CellAgent {
	uses Logging, ExternalContextAccess, DefaultContextInteractions, SudokuMaths, Behaviors, Lifecycle

	var x : Integer
	var y : Integer
	var rowCtxId : ContextContainer
	var colCtxId : ContextContainer
	var nbValuesReceived = new Integer(0)
	var values = new HashSet<Integer>
	var candidates = new ConcurrentLinkedQueue<Integer>
	var spaces = new HashMap<RegionTypeEnum, EventSpace>
	var nudeSingletonBehavior : NudeSingletonSeekingBehavior
	var hiddenSingletonBehavior : HiddenSingletonSeekingBehavior
	var candidatesLock = new ReentrantLock
	var nbValuesReceivedLock = new ReentrantLock
	var commSkill : SudokuBaseCommunication
	var resolving = true
	var ecoResolveBehavior : EcoResolutionBehavior
	val agents = new HashSet<UUID>
	var algos = new ArrayList<Algorithms>

	on Initialize {
		if (occurrence.parameters.length >= 4) {
			rowCtxId = occurrence.parameters.get(0) as ContextContainer
			colCtxId = occurrence.parameters.get(1) as ContextContainer
			x = occurrence.parameters.get(2) as Integer // row
			y = occurrence.parameters.get(3) as Integer // col
			loggingName = "Cell n° (" + x + "," + y + ")"
			join(rowCtxId.contextId, rowCtxId.^space.spaceID.ID)
			join(colCtxId.contextId, colCtxId.^space.spaceID.ID)
		}
		spaces.put(RegionTypeEnum.BLOC, defaultSpace)
		spaces.put(RegionTypeEnum.LIGNE, rowCtxId.^space)
		spaces.put(RegionTypeEnum.COLONNE, colCtxId.^space)
		setSkill(new SudokuMathsBaseSkill(values), SudokuMaths)
		commSkill = new SudokuBaseCommunication(x, y, spaces)
		setSkill(commSkill, SudokuCommunication)
		nudeSingletonBehavior = new NudeSingletonSeekingBehavior(this, candidates, commSkill)
		hiddenSingletonBehavior = new HiddenSingletonSeekingBehavior(this, candidates, commSkill)
		ecoResolveBehavior = new EcoResolutionBehavior(this, candidates, commSkill)
	}

	on Algos {
		this.algos.addAll(occurrence.algos)
		if (occurrence.algos.contains(Algorithms.NUDE_SINGLETONS) &&
			!occurrence.algos.contains(Algorithms.ECO_RESOLUTION)) {
			registerBehavior(nudeSingletonBehavior)
		}
		if (occurrence.algos.contains(Algorithms.HIDDEN_SINGLETONS)) {
			registerBehavior(hiddenSingletonBehavior)
		}
		if (occurrence.algos.contains(Algorithms.ECO_RESOLUTION)) {
			try {
				registerBehavior(ecoResolveBehavior)
			} catch (e : Exception) {
				ecoResolveBehavior = new EcoResolutionBehavior(this, candidates, commSkill)
				registerBehavior(ecoResolveBehavior)
			}
		}
	}

	on ContextJoined {
		if (occurrence.holonContextID.equals(rowCtxId.contextId)) {
			rowCtxId.^space.emit(
				new Position(y, getID, RegionTypeEnum.LIGNE),
				Scopes.addresses(rowCtxId.^space.getAddress(rowCtxId.id))
			)
		}
		if (occurrence.holonContextID.equals(colCtxId.contextId)) {
			colCtxId.^space.emit(
				new Position(y, getID, RegionTypeEnum.COLONNE),
				Scopes.addresses(colCtxId.^space.getAddress(colCtxId.id))
			)
		}
	}

	on Values {
		agents.addAll(occurrence.agents)
		nbValuesReceivedLock.lock
		values.addAll(occurrence.values)
		nbValuesReceived++
		if (nbValuesReceived == 3) {
			values.remove(null)
			nbValuesReceivedLock.unlock
			candidatesLock.lock
			candidates.addAll(evaluateCandidates)
			candidatesLock.unlock
			emit(new ReadyToResolve)
			wake(new StartResolve => [it.agents = this.agents])
		} else {
			nbValuesReceivedLock.unlock
		}
	}
	/** 
	 * Une solution a été trouvée dans un holon de l'agent
	 */
	on SolutionFound [!isFromMe && !values.contains(occurrence.solution)] {
		values.add(occurrence.solution)
		candidatesLock.lock
		if (candidates.contains(occurrence.solution)) {
			candidates.remove(occurrence.solution)
		}
		candidatesLock.unlock
	}

	on StopResolve {
		resolving = false
	}

	on Destroy {
		if (algos.contains(Algorithms.NUDE_SINGLETONS)) {
			unregisterBehavior(nudeSingletonBehavior)
		}
		if (algos.contains(Algorithms.HIDDEN_SINGLETONS)) {
			unregisterBehavior(hiddenSingletonBehavior)
		}
		if (algos.contains(Algorithms.ECO_RESOLUTION))
			unregisterBehavior(ecoResolveBehavior)
	}

	on Exit {
		killMe
	}

}
