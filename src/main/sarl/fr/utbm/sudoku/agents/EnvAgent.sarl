/** 
 * 
 */
package fr.utbm.sudoku.agents

import fr.utbm.sudoku.SudokuApplication
import fr.utbm.sudoku.controllers.GridController
import fr.utbm.sudoku.events.EcoResolve
import fr.utbm.sudoku.events.Exit
import fr.utbm.sudoku.events.ReadyForEcoResolve
import fr.utbm.sudoku.events.RegionAgentInitialized
import fr.utbm.sudoku.events.RegionAgentSpawned
import fr.utbm.sudoku.events.Resolve
import fr.utbm.sudoku.events.RowAndColInit
import fr.utbm.sudoku.events.RowAndColSpawned
import fr.utbm.sudoku.events.SolutionFoundInBloc
import fr.utbm.sudoku.events.SpawnRequired
import fr.utbm.sudoku.events.UpdateSudoku
import fr.utbm.sudoku.model.Algorithms
import fr.utbm.sudoku.model.ContextContainer
import fr.utbm.sudoku.model.RegionTypeEnum
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.util.OpenEventSpace
import java.util.ArrayList
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import fr.utbm.sudoku.behaviors.TokenManagerBehavior

agent EnvAgent {

	uses Logging, ExternalContextAccess, DefaultContextInteractions, Behaviors, Lifecycle

	var app : SudokuApplication

	var controller : GridController

	val rowCtxIds = new ConcurrentHashMap<Integer, ContextContainer>
	val colCtxIds = new ConcurrentHashMap<Integer, ContextContainer>
	var openSpace : OpenEventSpace

	var rowInit = new Integer(0);
	var colInit = new Integer(0);
	var ecoResolveCountDown = 9;
	
	var rows = new ConcurrentHashMap<Integer, UUID>
	var cols = new ConcurrentHashMap<Integer, UUID>
	
	var tokenManagerBehavior : TokenManagerBehavior

	on Initialize {
		if (occurrence.parameters.length >= 2) {
			this.app = occurrence.parameters.get(0) as SudokuApplication
			this.openSpace = occurrence.parameters.get(1) as OpenEventSpace
		}
		openSpace.register(asEventListener)
	}

	on SpawnRequired {
		this.controller = occurrence.controller		
		for (var i = 0; i < 9; i++) {
			rows.put(i,RowAndColAgent.spawn(i, this.controller.sudoku.getRow(i), RegionTypeEnum.LIGNE))
			cols.put(i,RowAndColAgent.spawn(i, this.controller.sudoku.getColumn(i), RegionTypeEnum.COLONNE))
		}
	}

	on RowAndColSpawned {
		var blocs = new ArrayList<UUID>
		for (var i = 0; i < 9; i++) {
			for (var j = 0; j < 9; j++) {
				var startI = i - 2
				var startJ = j - 2
				if (startI % 3 === 0 && startJ % 3 === 0) {
					blocs.add(
						BlocAgent.spawn(startI, startJ, this.controller.sudoku.getBloc(startI, i, startJ, j), rowCtxIds,
							colCtxIds))
				}
			}
		}
	}

	on RegionAgentSpawned {
		if (occurrence.type.equals(RegionTypeEnum.LIGNE))
			rowCtxIds.put(occurrence.num,
				new ContextContainer(occurrence.num, occurrence.contextId, occurrence.^space, occurrence.Id))

		if (occurrence.type.equals(RegionTypeEnum.COLONNE))
			colCtxIds.put(occurrence.num,
				new ContextContainer(occurrence.num, occurrence.contextId, occurrence.^space, occurrence.Id))

		if (colCtxIds.size == 9 && rowCtxIds.size == 9) {
			wake(new RowAndColSpawned)
		}
	}

	on RegionAgentInitialized {
		if (occurrence.type.equals(RegionTypeEnum.LIGNE)) {
			rowInit++
		}
		if (occurrence.type.equals(RegionTypeEnum.LIGNE)) {
			colInit++
		}
		var rows = rowInit
		var cols = colInit
		if (rows.equals(9) && cols.equals(9)) {
			wake(new RowAndColInit)
		}
	}

	on Resolve [!isFromMe] {
		var nbAlgos = 0
		if (occurrence.algos.contains(Algorithms.ECO_RESOLUTION)) {
			nbAlgos ++
		}
		if(occurrence.algos.contains(Algorithms.HIDDEN_SINGLETONS)){
			nbAlgos ++
		}
		tokenManagerBehavior = new TokenManagerBehavior(this, rows, cols, nbAlgos)
		tokenManagerBehavior.registerBehavior
		emit(new Resolve => [algos = occurrence.algos])
	}

	on RowAndColInit {
		controller.enableStart
	}

	on SolutionFoundInBloc {
		openSpace.emit(
			new UpdateSudoku => [solution = occurrence.solution; x = occurrence.x; y = occurrence.y]
		)
	}

	on UpdateSudoku {
		openSpace.emit(new UpdateSudoku => [solution = occurrence.solution; x = occurrence.x; y = occurrence.y])
	}
	

	on ReadyForEcoResolve {
		ecoResolveCountDown--
		if (ecoResolveCountDown == 0) {
			emit(new EcoResolve)
			info("Start Eco Resolution")
		}
	}
	
	

	on Exit [!isFromMe] {
		emit(new Exit)
		tokenManagerBehavior.unregisterBehavior
		killMe
	}

}
