/** 
 * 
 */
package fr.utbm.sudoku.capacities

import fr.utbm.sudoku.events.TokenReleased
import fr.utbm.sudoku.model.RegionTypeEnum
import io.sarl.core.ExternalContextAccess
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.List
import java.util.Map
import java.util.UUID

/** 
 * @author Cl√©ment Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
capacity SudokuCommunication {

	def emitToAllHolons(e : Event)

	def emitToHolon(e : Event, type : RegionTypeEnum, scope : Scope<Address> = null)

	def getX : Integer

	def getY : Integer

	def getSpaces : Map<RegionTypeEnum, EventSpace>

	def isFromMeInOtherHolon(e : Event) : boolean

	def determineRegion(x1 : Integer, y1 : Integer) : List<RegionTypeEnum>

	def determineHolon(e : Event) : RegionTypeEnum
	
	def getHolon(id : UUID) : RegionTypeEnum
	
	def releaseToken(done : boolean)
}

skill SudokuBaseCommunication implements SudokuCommunication {
	uses ExternalContextAccess

	var spaces : Map<RegionTypeEnum, EventSpace>
	var addresses : Map<RegionTypeEnum,Address>
	var x : Integer
	var y : Integer

	new (x : Integer, y : Integer, s : Map<RegionTypeEnum, EventSpace>, a : Map<RegionTypeEnum, Address>) {
		this.x = x;
		this.y = y;
		this.spaces = s;
		this.addresses = a;
	}

	def emitToAllHolons(e : Event) {
		e.emitToHolon(RegionTypeEnum.BLOC)
		e.emitToHolon(RegionTypeEnum.LIGNE)
		e.emitToHolon(RegionTypeEnum.COLONNE)
	}

	def emitToHolon(e : Event, type : RegionTypeEnum, scope : Scope<Address> = null ) {
		var ^space = spaces.get(type)
		e.source = ^space.getAddress(ID)
		^space.emit(e, scope)
	}
	
	
	def releaseToken (d : boolean){
		var e = new TokenReleased => [done = d]
		e.emitToHolon(RegionTypeEnum.BLOC, Scopes.addresses(addresses.get(RegionTypeEnum.BLOC)))
		e.emitToHolon(RegionTypeEnum.LIGNE, Scopes.addresses(addresses.get(RegionTypeEnum.LIGNE)))
		e.emitToHolon(RegionTypeEnum.COLONNE, Scopes.addresses(addresses.get(RegionTypeEnum.COLONNE)))
	}

	def getX : Integer {
		return x
	}

	def getY : Integer {
		return y
	}

	def getSpaces : Map<RegionTypeEnum, EventSpace> {
		return spaces
	}

	def isFromMeInOtherHolon(e : Event) : boolean {
		return (
			!e.isFrom(spaces.get(RegionTypeEnum.BLOC).getAddress(ID)) &&
			!e.isFrom(spaces.get(RegionTypeEnum.LIGNE).getAddress(ID)) &&
			!e.isFrom(spaces.get(RegionTypeEnum.COLONNE).getAddress(ID))	
		)
	}

	def determineRegion(x1 : Integer, y1 : Integer) : List<RegionTypeEnum> {
		var regions = new ArrayList<RegionTypeEnum>
		if(x1 == x) regions.add(RegionTypeEnum.LIGNE)
		if(y1 == y) regions.add(RegionTypeEnum.COLONNE)
		var row = x / 3 as Integer
		var col = y / 3 as Integer
		var solRow = x1 / 3 as Integer
		var solCol = y1 / 3 as Integer
		if(row == solRow && col == solCol) regions.add(RegionTypeEnum.BLOC)
		return regions
	}

	def determineHolon(e : Event) : RegionTypeEnum {
		for (sp : spaces.entrySet) {
			if(e.isInSpace(sp.value)) return sp.key
		}
	}
	
	def getHolon(id : UUID) : RegionTypeEnum {
		for (sp : spaces.entrySet) {
			if(sp.value.participants.contains(id)) return sp.key
		}
	}
}
