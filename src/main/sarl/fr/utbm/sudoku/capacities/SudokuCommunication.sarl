/** 
 * 
 */
package fr.utbm.sudoku.capacities

import fr.utbm.sudoku.model.RegionTypeEnum
import io.sarl.core.ExternalContextAccess
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import java.util.ArrayList
import java.util.List
import java.util.Map

/** 
 * @author Cl√©ment Bareth-Desgranges <clement.bareth@gmail.com>
 * 
 */
capacity SudokuCommunication {
	
	def emitToAllHolons(e:Event)
	def emitToHolon(e:Event,type:RegionTypeEnum)
	def getX : Integer
	def getY : Integer
	def getSpaces : Map<RegionTypeEnum, EventSpace>
	def isFromMeInOtherHolon(e:Event):boolean
	def determineRegion(x1 : Integer, y1 : Integer): List<RegionTypeEnum>
}

skill SudokuBaseCommunication implements SudokuCommunication {
	uses ExternalContextAccess
	
	var spaces : Map<RegionTypeEnum, EventSpace>
	var x : Integer
	var y: Integer
	
	new (x : Integer, y : Integer, s : Map<RegionTypeEnum, EventSpace>){
		this.x = x;
		this.y = y;
		this.spaces = s;
	}

	def emitToAllHolons(e : Event) {
		e.emitToHolon(RegionTypeEnum.BLOC)
		e.emitToHolon(RegionTypeEnum.LIGNE)
		e.emitToHolon(RegionTypeEnum.COLONNE)
	}

	def emitToHolon(e : Event, type : RegionTypeEnum) {
		var ^space = spaces.get(type)
		e.source = ^space.getAddress(ID)
		^space.emit(e)
	}
	
	def getX : Integer{
		return x
	}
	
	def getY : Integer{
		return y
	}
	
	def getSpaces : Map<RegionTypeEnum,EventSpace>{
		return spaces
	}
	
	def isFromMeInOtherHolon(e : Event) : boolean {
		return (
			!e.isFrom(spaces.get(RegionTypeEnum.BLOC).getAddress(ID)) &&
			!e.isFrom(spaces.get(RegionTypeEnum.LIGNE).getAddress(ID)) &&
			!e.isFrom(spaces.get(RegionTypeEnum.COLONNE).getAddress(ID))	
		)
	}

	def determineRegion(x1 : Integer, y1 : Integer) : List<RegionTypeEnum> {
		var regions = new ArrayList<RegionTypeEnum>
		if(x1 == x) regions.add(RegionTypeEnum.LIGNE)
		if(y1 == y) regions.add(RegionTypeEnum.COLONNE)
		var row = x / 3 as Integer
		var col = y / 3 as Integer
		var solRow = x1 / 3 as Integer
		var solCol = y1 / 3 as Integer
		if(row == solRow && col == solCol) regions.add(RegionTypeEnum.BLOC)
		return regions
	}
}
