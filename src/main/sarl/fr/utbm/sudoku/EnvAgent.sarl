/** 
 * 
 */
package fr.utbm.sudoku

import fr.utbm.sudoku.controllers.GridController
import fr.utbm.sudoku.events.ColAgentSpawned
import fr.utbm.sudoku.events.Exit
import fr.utbm.sudoku.events.RowAgentSpawned
import fr.utbm.sudoku.events.SpawnRequired
import fr.utbm.sudoku.model.BlocAgent
import fr.utbm.sudoku.model.ColumnAgent
import fr.utbm.sudoku.model.RowAgent
import io.sarl.core.AgentKilled
import io.sarl.core.Behaviors
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.util.OpenEventSpace
import java.util.ArrayList
import java.util.UUID
import java.util.HashMap
import fr.utbm.sudoku.model.ContextContainer

agent EnvAgent{
	
	uses Logging, Lifecycle, Behaviors;

	var app : SudokuApplication
	
	var controller : GridController
	
	val rowCtxIds = new ArrayList<ContextContainer>
	val colCtxIds = new ArrayList<ContextContainer>
	
	var openSpace : OpenEventSpace
		
	on Initialize {
		if (occurrence.parameters.length >= 2) {
			this.app = occurrence.parameters.get(0) as SudokuApplication
			this.openSpace = occurrence.parameters.get(1) as OpenEventSpace
		}
		openSpace.register(asEventListener)
	}
	
	on SpawnRequired{
		this.controller = occurrence.controller
		info("Spawn command required")
		var rows = new ArrayList<UUID>
		var columns = new ArrayList<UUID>
		var blocs = new ArrayList<UUID>
		for (var i = 0; i < 9; i++) {
			rows.add(RowAgent.spawn(i, this.controller.sudoku.getRow(i)))
			columns.add(ColumnAgent.spawn(i, this.controller.sudoku.getColumn(i)))
			for (var j = 0; j < 9; j++) {
				var startI = i - 2
				var startJ = j - 2
				if (startI % 3 === 0 && startJ % 3 === 0) {
					blocs.add(
						BlocAgent.spawn(
							startI, startJ, this.controller.sudoku.getBloc(startI,i,startJ,j), rowCtxIds, colCtxIds
						)
					)
				}
			}
		}
		info("Region agents spawned")
	}

	on RowAgentSpawned {
		rowCtxIds.add(occurrence.num, new ContextContainer(occurrence.num, occurrence.contextId, occurrence.spaceID))
	}

	on ColAgentSpawned {
		colCtxIds.add(occurrence.num, new ContextContainer(occurrence.num, occurrence.contextId, occurrence.spaceID))
	}
	
	on Exit {
		killMe
	}



	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
		
}
