/** 
 * 
 */
package fr.utbm.sudoku

import fr.utbm.sudoku.events.Exit
import fr.utbm.sudoku.events.SpawnRequired
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.Behaviors
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.util.OpenEventSpace

agent EnvAgent{
	
	uses Logging, Lifecycle, DefaultContextInteractions, Behaviors;

	var app : SudokuApplication
	
	var openSpace : OpenEventSpace
		
	on Initialize {
		if (occurrence.parameters.length >= 2) {
			this.app = occurrence.parameters.get(0) as SudokuApplication
			this.openSpace = occurrence.parameters.get(1) as OpenEventSpace
		}
		openSpace.register(asEventListener)
	}
	
	on SpawnRequired{
		info("Spawn command required")
//		var sudoku = occurrence.sudoku
//		var rows = new ArrayList<UUID>
//		var columns = new ArrayList<UUID>
//		var blocs = new ArrayList<UUID>
//
//		for (var j = 0; j < 9; j++) {
//			rows.add(RowAgent.spawn(j))
//		}
//
//		for (var i = 0; i < 9; i++) {
//			for (var j = 0; j < 9; j++) {
//				var startI = i - 3
//				var startJ = j - 3
//				if (startI % 3 === 0 && startJ % 3 === 0) {
//					blocs.add(BlocAgent.spawn(startI, i, startJ, j))
//				}
//			}
//			columns.add(ColumnAgent.spawn(i))
//		}
//		info("Region agents spawned")
	}

	on Destroy {
		info("The agent was stopped.")
	}
	
	on Exit {
		killMe
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
		
}
